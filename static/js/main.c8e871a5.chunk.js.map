{"version":3,"sources":["Components/Clouds.js","Components/Stars.js","Components/Sky.js","App.js","serviceWorker.js","index.js"],"names":["clouds","createdClouds","Array","keys","map","_","key","left","Math","floor","random","size","bottom","float","keyframes","Clouds","styled","div","css","CloudsComponent","stars","display","Night","colors","randomColor","length","star","Stars","StarsComponent","dayLight","Sky","SkyComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u5BAGA,IAAsBA,EAuChBC,GAvCgBD,EAuCa,KAtCjCA,EAAM,YAAOE,MAAMF,EAAS,GAAGG,SACjBC,KAAI,SAACC,EAAGC,GACpB,IAAMC,EAAI,UAAMC,KAAKC,MAAuB,IAAjBD,KAAKE,OAAO,IAA7B,MACJC,EAAI,UAAMH,KAAKC,MAAM,IAAAD,KAAKE,SAAwB,IAA9C,MACJE,EAAM,UAAMJ,KAAKC,MAAM,IAAAD,KAAKE,OAAO,GAAkB,IAA/C,MAENG,EAAQC,YAAH,KAcLC,EAASC,IAAOC,IAAV,KALM,kBAChBC,YADiB,IAEbL,EAASL,KAAKC,MAAM,IAAAD,KAAKE,SAAwB,OAOlCC,EACVA,EACCA,EACCH,KAAKE,SACRH,EACEK,GAKZ,OAAO,kBAACG,EAAD,CAAQT,IAAKA,QAQTa,EAFS,kBAAM,6BAAMlB,I,umCCzCpC,IAwBqBmB,EAxBfC,EAAUP,YAAH,KAoBPQ,EAAQN,IAAOC,IAAV,KALU,kBACnBC,YADoB,IAEhBG,MAkDAD,GA3CeA,EA2CK,KA1CxBA,EAAK,YAAOlB,MAAMkB,EAAQ,GAAGjB,SAEhBC,KAAI,SAACC,EAAGC,GACnB,IAAMiB,EAAS,CAAC,qBAAsB,sBAChCC,EAAcD,EAAOf,KAAKC,MAAMD,KAAKE,SAAWa,EAAOE,SACvDlB,EAAI,UAAMC,KAAKC,MAAuB,IAAjBD,KAAKE,OAAO,IAA7B,MACJC,EAAI,UAAMH,KAAKC,MAAMD,KAAKE,OAAO,GAAK,GAAlC,MACJE,EAAM,UAAMJ,KAAKC,MAAM,KAAAD,KAAKE,OAAO,GAAmB,KAAhD,MAENgB,EAAOZ,YAAH,IAOkBN,KAAKC,MAAuB,GAAjBD,KAAKE,OAAO,KAS7CiB,EAAQX,IAAOC,IAAV,KALW,kBACpBC,YADqB,IAEjBQ,EAAQlB,KAAKC,MAAuB,GAAjBD,KAAKE,OAAO,GAAU,MAKrCH,EACCI,EACCA,EACIa,EACJZ,EAGQJ,KAAKC,MAAuB,EAAjBD,KAAKE,OAAO,IACrCF,KAAKC,MAAuB,EAAjBD,KAAKE,OAAO,IAAac,GAG1C,OAAO,kBAACG,EAAD,CAAOrB,IAAKA,QAQRsB,EAFQ,kBAAM,kBAACN,EAAD,KAAQF,I,6eCrErC,IAAMS,EAAWf,YAAH,KAmBRgB,EAAMd,IAAOC,IAAV,KAJS,kBAChBC,YADiB,IAEbW,MAYSE,EAFM,kBAAM,kBAACD,EAAD,OCfZE,EAVH,WACV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c8e871a5.chunk.js","sourcesContent":["import React from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\n\nconst createClouds = (clouds) => {\n  clouds = [...Array(clouds + 1).keys()];\n  return clouds.map((_, key) => {\n    const left = `${Math.floor(Math.random(1) * 100)}vw`;\n    const size = `${Math.floor(Math.random() * (500 - 30) + 30)}px`;\n    const bottom = `${Math.floor(Math.random(1) * (300 - 10) + 10)}px`;\n\n    const float = keyframes`\n      from {\n        transform: translateX(2000px);\n      }\n      to {\n        transform: translateX(-2000px);\n      }\n    `;\n\n    const animation = () =>\n      css`\n        ${float} ${Math.floor(Math.random() * (500 - 30) + 30)}s linear infinite\n      `;\n\n    const Clouds = styled.div`\n      animation: ${animation};\n      background-image: url(https://www.svgimages.com/svg-image/s7/cloud.svg);\n      background-repeat: no-repeat;\n      background-size: ${size};\n      width: ${size};\n      height: ${size};\n      opacity: ${Math.random()};\n      left: ${left};\n      bottom: ${bottom};\n      position: absolute;\n      z-index: 1;\n    `;\n\n    return <Clouds key={key} />;\n  });\n};\n\nconst createdClouds = createClouds(100);\n\nconst CloudsComponent = () => <div>{createdClouds}</div>;\n\nexport default CloudsComponent;\n","import React from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\n\nconst display = keyframes`\n        0%,\n        30% {\n          opacity: 1;\n        }\n        40%,\n        80% {\n          opacity: 0;\n        }\n        90%,\n        100% {\n          opacity: 1;\n        }\n      `;\n\nconst displayStars = () =>\n  css`\n    ${display} 30s linear infinite\n  `;\n\nconst Night = styled.div`\n  animation: ${displayStars};\n`;\n\nconst createStars = (stars) => {\n  stars = [...Array(stars + 1).keys()];\n\n  return stars.map((_, key) => {\n    const colors = [\"rgb(255, 255, 255)\", \"rgb(255, 255, 217)\"];\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n    const left = `${Math.floor(Math.random(1) * 100)}vw`;\n    const size = `${Math.floor(Math.random(1) + 3)}px`;\n    const bottom = `${Math.floor(Math.random(1) * (1500 - 10) + 100)}px`;\n\n    const star = keyframes`\n        0% {\n        opacity: 0;\n        transform: translateX(0px);\n        }\n        100% {\n        opacity: 1;\n        transform: translateX(${Math.floor(Math.random(1) * 50)}px);     \n        }\n      `;\n\n    const starAnimation = () =>\n      css`\n        ${star} ${Math.floor(Math.random(1) * 50 + 5)}s infinite alternate;\n      `;\n\n    const Stars = styled.div`\n      animation: ${starAnimation};\n      left: ${left};\n      width: ${size};\n      height: ${size};\n      background: ${randomColor};\n      bottom: ${bottom};\n      position: absolute;\n      border-radius: 50%;\n      box-shadow: 0 0 ${Math.floor(Math.random(1) * 5)}px\n        ${Math.floor(Math.random(1) * 5)}px ${randomColor};\n    `;\n\n    return <Stars key={key} />;\n  });\n};\n\nconst stars = createStars(150);\n\nconst StarsComponent = () => <Night>{stars}</Night>;\n\nexport default StarsComponent;\n","import React from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\n\nconst dayLight = keyframes`\n  0%,\n  20% {\n    background: #101c2a;\n  }\n  40%,\n  70% {\n    background: #87ceeb;\n  }\n  90%,\n  100% {\n    background: #101c2a;\n  }\n`;\n\nconst animation = () =>\n  css`\n    ${dayLight} 30s linear infinite;\n  `;\nconst Sky = styled.div`\n  animation: ${animation};\n  height: 100vh;\n  overflow: hidden;\n  z-index: -1;\n  color: rgb(255, 255, 255);\n`;\n\nconst SkyComponent = () => <Sky />;\n\nexport default SkyComponent;\n","import React from \"react\";\nimport Clouds from \"./Components/Clouds\";\nimport Stars from \"./Components/Stars\";\nimport Sky from \"./Components/Sky\";\n\nconst App = () => {\n  return (\n    <div>\n      <Sky />\n      <Stars />\n      <Clouds />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}